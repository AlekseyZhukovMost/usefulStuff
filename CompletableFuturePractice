package com.example.SpringBootTestApp;

import java.util.ArrayList;
import java.util.List;
import java.util.OptionalDouble;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

public class CompletableFuturePractice {

    public static class PriceRetriever {

        public double getPrice(long itemId, long shopId) {
            // имитация долгого HTTP-запроса
            int delay = ThreadLocalRandom.current().nextInt(10);
            try {
                Thread.sleep(delay * 1000);
            } catch (InterruptedException e) {
            }

            double v = ThreadLocalRandom.current().nextDouble(1000);
            return v;
        }
    }

    public static class PriceAggregator {


        private PriceRetriever priceRetriever = new PriceRetriever();

        private Set<Long> shopIds = Set.of(10l, 45l, 66l, 345l, 234l, 333l, 67l, 123l, 768l);

        public double getMinPrice(long itemId) {
            List<CompletableFuture> futureList = new ArrayList<>();
            for (Long shopId : shopIds) {
                futureList.add(CompletableFuture
                        .supplyAsync(() -> priceRetriever.getPrice(itemId, shopId))
                        .completeOnTimeout(Double.MAX_VALUE, 2900, TimeUnit.MILLISECONDS));
            }
            CompletableFuture<Void> allOf = CompletableFuture.allOf(futureList.toArray(new CompletableFuture[futureList.size()]));
            OptionalDouble join = allOf.thenApply(v -> futureList.stream()
                    .map(CompletableFuture::join)
                    .mapToDouble(it -> Double.parseDouble(it.toString())).min()).join();

            return join.orElse(Double.MAX_VALUE);
        }
    }

    public static void main(String[] args) {
        PriceAggregator priceAggregator = new PriceAggregator();
        long itemId = 12l;

        long start = System.currentTimeMillis();
        double min = priceAggregator.getMinPrice(itemId);
        long end = System.currentTimeMillis();

        System.out.println(min);
        System.out.println((end - start) < 3000); // should be true
    }
}
